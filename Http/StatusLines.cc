#include "pch.h"
#include "StatusLines.h"

namespace StatusLines {
	std::string Continue{ "HTTP/1.1 100 Continue\r\n" };
	std::string SwitchingProtocols{ "HTTP/1.1 101 Switching Protocols\r\n" };
	std::string Processing{ "HTTP/1.1 102 Processing\r\n" };
	std::string EarlyHints{ "HTTP/1.1 103 Early Hints\r\n" };
	std::string OK{ "HTTP/1.1 200 OK\r\n" };
	std::string Created{ "HTTP/1.1 201 Created\r\n" };
	std::string Accepted{ "HTTP/1.1 202 Accepted\r\n" };
	std::string NonAuthoritativeInformation{ "HTTP/1.1 203 Non-Authoritative Information\r\n" };
	std::string NoContent{ "HTTP/1.1 204 No Content\r\n" };
	std::string ResetContent{ "HTTP/1.1 205 Reset Content\r\n" };
	std::string PartialContent{ "HTTP/1.1 206 Partial Content\r\n" };
	std::string MultiStatus{ "HTTP/1.1 207 Multi-Status\r\n" };
	std::string AlreadyReported{ "HTTP/1.1 208 Already Reported\r\n" };
	std::string IMUsed{ "HTTP/1.1 226 IM Used\r\n" };
	std::string MultipleChoices{ "HTTP/1.1 300 Multiple Choices\r\n" };
	std::string MovedPermanently{ "HTTP/1.1 301 Moved Permanently\r\n" };
	std::string Found{ "HTTP/1.1 302 Found\r\n" };
	std::string SeeOther{ "HTTP/1.1 303 See Other\r\n" };
	std::string NotModified{ "HTTP/1.1 304 Not Modified\r\n" };
	std::string UseProxy{ "HTTP/1.1 305 Use Proxy\r\n" };
	std::string TemporaryRedirect{ "HTTP/1.1 307 Temporary Redirect\r\n" };
	std::string PermanentRedirect{ "HTTP/1.1 308 Permanent Redirect\r\n" };
	std::string BadRequest{ "HTTP/1.1 400 Bad Request\r\n" };
	std::string Unauthorized{ "HTTP/1.1 401 Unauthorized\r\n" };
	std::string PaymentRequired{ "HTTP/1.1 402 Payment Required\r\n" };
	std::string Forbidden{ "HTTP/1.1 403 Forbidden\r\n" };
	std::string NotFound{ "HTTP/1.1 404 Not Found\r\n" };
	std::string MethodNotAllowed{ "HTTP/1.1 405 Method Not Allowed\r\n" };
	std::string NotAcceptable{ "HTTP/1.1 406 Not Acceptable\r\n" };
	std::string ProxyAuthenticationRequired{ "HTTP/1.1 407 Proxy Authentication Required\r\n" };
	std::string RequestTimeout{ "HTTP/1.1 408 Request Timeout\r\n" };
	std::string Conflict{ "HTTP/1.1 409 Conflict\r\n" };
	std::string Gone{ "HTTP/1.1 410 Gone\r\n" };
	std::string LengthRequired{ "HTTP/1.1 411 Length Required\r\n" };
	std::string PreconditionFailed{ "HTTP/1.1 412 Precondition Failed\r\n" };
	std::string PayloadTooLarge{ "HTTP/1.1 413 Payload Too Large\r\n" };
	std::string URITooLong{ "HTTP/1.1 414 URI Too Long\r\n" };
	std::string UnsupportedMediaType{ "HTTP/1.1 415 Unsupported Media Type\r\n" };
	std::string RangeNotSatisfiable{ "HTTP/1.1 416 Range Not Satisfiable\r\n" };
	std::string ExpectationFailed{ "HTTP/1.1 417 Expectation Failed\r\n" };
	std::string MisdirectedRequest{ "HTTP/1.1 421 Misdirected Request\r\n" };
	std::string UnprocessableEntity{ "HTTP/1.1 422 Unprocessable Entity\r\n" };
	std::string Locked{ "HTTP/1.1 423 Locked\r\n" };
	std::string FailedDependency{ "HTTP/1.1 424 Failed Dependency\r\n" };
	std::string UpgradeRequired{ "HTTP/1.1 426 Upgrade Required\r\n" };
	std::string PreconditionRequired{ "HTTP/1.1 428 Precondition Required\r\n" };
	std::string TooManyRequests{ "HTTP/1.1 429 Too Many Requests\r\n" };
	std::string RequestHeaderFieldsTooLarge{ "HTTP/1.1 431 Request Header Fields Too Large\r\n" };
	std::string UnavailableForLegalReasons{ "HTTP/1.1 451 Unavailable For Legal Reasons\r\n" };
	std::string InternalServerError{ "HTTP/1.1 500 Internal Server Error\r\n" };
	std::string NotImplemented{ "HTTP/1.1 501 Not Implemented\r\n" };
	std::string BadGateway{ "HTTP/1.1 502 Bad Gateway\r\n" };
	std::string ServiceUnavailable{ "HTTP/1.1 503 Service Unavailable\r\n" };
	std::string GatewayTimeout{ "HTTP/1.1 504 Gateway Timeout\r\n" };
	std::string HTTPVersionNotSupported{ "HTTP/1.1 505 HTTP Version Not Supported\r\n" };
	std::string VariantAlsoNegotiates{ "HTTP/1.1 506 Variant Also Negotiates\r\n" };
	std::string InsufficientStorage{ "HTTP/1.1 507 Insufficient Storage\r\n" };
	std::string LoopDetected{ "HTTP/1.1 508 Loop Detected\r\n" };
	std::string NotExtended{ "HTTP/1.1 510 Not Extended\r\n" };
	std::string NetworkAuthenticationRequired{ "HTTP/1.1 511 Network Authentication Required\r\n" };
}
